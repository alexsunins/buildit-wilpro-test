AWSTemplateFormatVersion: '2010-09-09'

Description: AWS CodePipeline for buildIT Wilpro exercise. Deploys a CodePipeline and CloudFormation Stacks.

Parameters:

  pGitHubUrl:
    Type: String
    Default: https://github.com/alexsunins/devops-test.git
    Description: The GitHub repository linked to a webhook
  
  pGitHubOAuthTokenSecretArn:
    Description: The name of a Secret that is holding GitHub OAuth token
    Type: String
    Default: '/wilpro/GithubTokenSecretArn'
  
  pCfnBuildImage:
    Type: String
    Default: aws/codebuild/standard:2.0
    Description: The CloudFormation build environment image.
    AllowedValues:
      - aws/codebuild/standard:2.0
      - aws/codebuild/standard:2.0-1.12.0
      - aws/codebuild/standard:2.0-1.11.0
      - aws/codebuild/standard:2.0-1.10.0
      - aws/codebuild/standard:2.0-1.9.0
      - aws/codebuild/standard:1.0
      - aws/codebuild/windows-base:1.0

Resources:
  rVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
  
  rInternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: rVPC

  rGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref rVPC
      InternetGatewayId: !Ref rInternetGateway
  
  rPublicSubnetA: # a subnet that is accessbile from the Internet
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref rVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [ 0, !GetAZs ]
  
  rPublicSubnetB: # a subnet that is accessbile from the Internet
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref rVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [ 1, !GetAZs ]

  rPublicRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref rVPC

  rPublicRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref rVPC

  rPublicRouteA:
    Type: AWS::EC2::Route
    DependsOn: rGatewayAttachment
    Properties:
      RouteTableId: !Ref rPublicRouteTableA
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref rInternetGateway
  
  rPublicRouteB:
    Type: AWS::EC2::Route
    DependsOn: rGatewayAttachment
    Properties:
      RouteTableId: !Ref rPublicRouteTableB
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref rInternetGateway
  
  rPublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref rPublicSubnetA
      RouteTableId: !Ref rPublicRouteTableA

  rPublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref rPublicSubnetB
      RouteTableId: !Ref rPublicRouteTableB
  
  rEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Port 80 Inbound'
      VpcId:
        Ref: rVPC
      SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            SourceSecurityGroupId:
              Ref: rELBSecurityGroup

  rELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Port 80 Inbound'
      VpcId:
        Ref: rVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
  
  # Load Balancer
  rALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: rEC2TargetGroup
      LoadBalancerArn:
        Ref: rApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  rApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
      - Ref: rPublicSubnetA
      - Ref: rPublicSubnetB
      SecurityGroups:
      - Ref: rELBSecurityGroup
  
  rEC2TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 15
      HealthyThresholdCount: 5
      Matcher:
        HttpCode: '200'
      Name: EC2TargetGroup
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
      - Key: load_balancing.algorithm.type
        Value: 'round_robin'
      Targets:
      - Id:
          Ref: rAppServerOne
        Port: 80
      UnhealthyThresholdCount: 3
      VpcId:
        Ref: rVPC

  # Linux Instance with Apache running on Port 80
  rAppServerOne:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-1ec8d37a
      InstanceInitiatedShutdownBehavior: terminate
      InstanceType: t2.nano
      NetworkInterfaces:
      - AssociatePublicIpAddress: true
        DeviceIndex: '0'
        GroupSet:
        - !Ref rEC2SecurityGroup
        SubnetId:
          Ref: rPublicSubnetA
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          cd /tmp
          yum update -y
          yum install -y httpd24
          echo "Healthy" > /var/www/html/index.html
          service httpd start
          /opt/aws/bin/cfn-signal \
            -e $? \
            --stack ${AWS::StackName} \
            --resource AmazonLinuxInstance \
            --region ${AWS::Region}

  rCodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - codebuild.amazonaws.com
      Policies:
        - PolicyName: CodeBuildServiceRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: CloudWatchWriteLogs
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:PutSubscriptionFilter
                Resource: '*'
              - Sid: S3ListBucket
                Effect: Allow
                Action:
                  - s3:ListBucket
                Resource:
                  - '*'
              - Sid: S3ListGetPutObjects
                Effect: Allow
                Action:
                  - s3:ListObjects
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
                  - s3:PutObject
                  - s3:PutObjectAcl
                Resource:
                  - '*'

  rGitHubAuthTokenSecret:
    Type: AWS::CodeBuild::SourceCredential
    Properties:
      AuthType: PERSONAL_ACCESS_TOKEN
      ServerType: GITHUB
      Token: !Sub '{{resolve:secretsmanager:${pGitHubOAuthTokenSecretArn}:SecretString:GITHUB_ACCESS_TOKEN}}'
    
  rCfnDeploymentProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: wilpro-cfn-project
      ServiceRole: !GetAtt rCodeBuildRole.Arn
      Source:
        Type: GITHUB
        Location: !Ref pGitHubUrl
        BuildSpec: buildspec-cfn.yml
        Auth:
          Type: OAUTH
          Resource: !Ref rGitHubAuthTokenSecret
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: !Ref pCfnBuildImage
        Type: LINUX_CONTAINER
      Triggers: 
        Webhook: true
        FilterGroups:
          - - Type: EVENT
              Pattern: PULL_REQUEST_CREATED,PULL_REQUEST_UPDATED
            - Type: BASE_REF
              Pattern: !Sub ^refs/heads/master$
              ExcludeMatchedPattern: false
      TimeoutInMinutes: 5