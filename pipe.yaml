AWSTemplateFormatVersion: '2010-09-09'

Description: AWS CodePipeline for buildIT Wilpro exercise. Deploys a CodePipeline and CloudFormation Stacks.

Parameters:
  pGitHubRepoOwner:
    Type: String
    Description: Owner of the GitHub Repository
    Default: alexsunins

  pGitHubRepoName:
    Type: String
    Description: Name of the GitHub Repository
    Default: devops-test

  pGitHubBranch:
    Type: String
    Description: Name of branch to use inside the GitHub Repository
    Default: master

  pGitHubUrl:
    Type: String
    Default: https://github.com/alexsunins/devops-test.git
    Description: The GitHub repository linked to a webhook
  
  pGitHubOAuthTokenSecretArn:
    Description: The name of a Secret that is holding GitHub OAuth token
    Type: String
    Default: '/wilpro/GithubTokenSecretArn'
  
  pCfnBuildImage:
    Type: String
    Default: aws/codebuild/standard:2.0
    Description: The CloudFormation build environment image.
    AllowedValues:
      - aws/codebuild/standard:2.0
      - aws/codebuild/standard:2.0-1.12.0
      - aws/codebuild/standard:2.0-1.11.0
      - aws/codebuild/standard:2.0-1.10.0
      - aws/codebuild/standard:2.0-1.9.0
      - aws/codebuild/standard:1.0
      - aws/codebuild/windows-base:1.0

Resources:
  # network components
  rVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
  
  rInternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: rVPC

  rGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref rVPC
      InternetGatewayId: !Ref rInternetGateway
  
  rPublicSubnetA: # a subnet that is accessbile from the Internet
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref rVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [ 0, !GetAZs ]
  
  rPublicSubnetB: # a subnet that is accessbile from the Internet
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref rVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [ 1, !GetAZs ]

  rPublicRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref rVPC

  rPublicRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref rVPC

  rPublicRouteA:
    Type: AWS::EC2::Route
    DependsOn: rGatewayAttachment
    Properties:
      RouteTableId: !Ref rPublicRouteTableA
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref rInternetGateway
  
  rPublicRouteB:
    Type: AWS::EC2::Route
    DependsOn: rGatewayAttachment
    Properties:
      RouteTableId: !Ref rPublicRouteTableB
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref rInternetGateway
  
  rPublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref rPublicSubnetA
      RouteTableId: !Ref rPublicRouteTableA

  rPublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref rPublicSubnetB
      RouteTableId: !Ref rPublicRouteTableB
  
  # load balancer
  
  rELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Port 80 Inbound'
      VpcId:
        Ref: rVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
  
  rEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Port 80 Inbound'
      VpcId:
        Ref: rVPC
      SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            SourceSecurityGroupId:
              Ref: rELBSecurityGroup  
  
  rALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: rEC2TargetGroup
      LoadBalancerArn:
        Ref: rApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  rApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
      - Ref: rPublicSubnetA
      - Ref: rPublicSubnetB
      SecurityGroups:
      - Ref: rELBSecurityGroup
  
  rEC2TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 15
      HealthyThresholdCount: 5
      Matcher:
        HttpCode: '200'
      Name: EC2TargetGroup
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
      - Key: load_balancing.algorithm.type
        Value: 'round_robin'
      Targets:
      - Id:
          Ref: rAppServerOne
        Port: 80
      UnhealthyThresholdCount: 3
      VpcId:
        Ref: rVPC

  # Linux Instances with Apache running on Port 80
  rAppServerOne:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-1ec8d37a
      InstanceInitiatedShutdownBehavior: terminate
      InstanceType: t2.nano
      NetworkInterfaces:
      - AssociatePublicIpAddress: true
        DeviceIndex: '0'
        GroupSet:
        - !Ref rEC2SecurityGroup
        SubnetId:
          Ref: rPublicSubnetA
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          cd /tmp
          yum update -y
          yum install -y httpd24
          echo "Healthy" > /var/www/html/index.html
          service httpd start
          /opt/aws/bin/cfn-signal \
            -e $? \
            --stack ${AWS::StackName} \
            --resource rAppServerOne \
            --region ${AWS::Region}
            
  rAppServerTwo:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-1ec8d37a
      InstanceInitiatedShutdownBehavior: terminate
      InstanceType: t2.nano
      NetworkInterfaces:
      - AssociatePublicIpAddress: true
        DeviceIndex: '0'
        GroupSet:
        - !Ref rEC2SecurityGroup
        SubnetId:
          Ref: rPublicSubnetB
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          cd /tmp
          yum update -y
          yum install -y httpd24
          echo "Healthy" > /var/www/html/index.html
          service httpd start
          /opt/aws/bin/cfn-signal \
            -e $? \
            --stack ${AWS::StackName} \
            --resource rAppServerTwo \
            --region ${AWS::Region}

  # code pipeline
  rBuildArtifactS3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName: !Sub ${pGitHubRepoName}-${pGitHubBranch}-pipeline

  rCodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "codepipeline.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: CodePipelinePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                  - "s3:GetBucketVersioning"
                  - "s3:List*"
                Resource:
                  - !Sub 'arn:aws:s3:::${pGitHubRepoName}-${pGitHubBranch}-pipeline'
              - Effect: Allow
                Action:
                  - "s3:PutObject"
                Resource:
                  - "arn:aws:s3:::codepipeline*"
                  - "arn:aws:s3:::elasticbeanstalk*"
              - Effect: Allow
                Action:
                  - "codecommit:CancelUploadArchive"
                  - "codecommit:GetBranch"
                  - "codecommit:GetCommit"
                  - "codecommit:GetUploadArchiveStatus"
                  - "codecommit:UploadArchive"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "codedeploy:CreateDeployment"
                  - "codedeploy:GetApplicationRevision"
                  - "codedeploy:GetDeployment"
                  - "codedeploy:GetDeploymentConfig"
                  - "codedeploy:RegisterApplicationRevision"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "elasticbeanstalk:*"
                  - "ec2:*"
                  - "elasticloadbalancing:*"
                  - "autoscaling:*"
                  - "cloudwatch:*"
                  - "s3:*"
                  - "sns:*"
                  - "cloudformation:*"
                  - "rds:*"
                  - "sqs:*"
                  - "ecs:*"
                  - "iam:PassRole"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                  - "lambda:ListFunctions"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "opsworks:CreateDeployment"
                  - "opsworks:DescribeApps"
                  - "opsworks:DescribeCommands"
                  - "opsworks:DescribeDeployments"
                  - "opsworks:DescribeInstances"
                  - "opsworks:DescribeStacks"
                  - "opsworks:UpdateApp"
                  - "opsworks:UpdateStack"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "cloudformation:CreateStack"
                  - "cloudformation:DeleteStack"
                  - "cloudformation:DescribeStacks"
                  - "cloudformation:UpdateStack"
                  - "cloudformation:CreateChangeSet"
                  - "cloudformation:DeleteChangeSet"
                  - "cloudformation:DescribeChangeSet"
                  - "cloudformation:ExecuteChangeSet"
                  - "cloudformation:SetStackPolicy"
                  - "cloudformation:ValidateTemplate"
                  - "iam:PassRole"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "codebuild:BatchGetBuilds"
                  - "codebuild:StartBuild"
                Resource: "*"

  rCodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub "${pGitHubRepoName}-${pGitHubBranch}-pipeline"
      ArtifactStore:
        Type: S3
        Location: !Ref rBuildArtifactS3Bucket
      RoleArn: !GetAtt rCodePipelineRole.Arn
      Stages:
        - Name: FetchSource
          Actions:
            - Name: Source-GitHub
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: "1"
              OutputArtifacts:
                - Name: !Sub "${pGitHubRepoName}-${pGitHubBranch}-source-artifacts"
              Configuration:
                Owner: !Ref pGitHubRepoOwner
                Repo: !Ref pGitHubRepoName
                Branch: !Ref pGitHubBranch
                OAuthToken: !Sub '{{resolve:secretsmanager:${pGitHubOAuthTokenSecret}:SecretString:GITHUB_ACCESS_TOKEN}}'
              RunOrder: 1
        - Name: Test
          Actions:
            - Name: CodeBuild
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: "1"
                Provider: CodeBuild
              InputArtifacts:
                - Name: !Sub "${pGitHubRepoName}-${pGitHubBranch}-source-artifacts"
              OutputArtifacts:
                - Name: !Sub "${pGitHubRepoName}-${pGitHubBranch}-test-output"
              Configuration:
                ProjectName: !Sub "${pGitHubRepoName}-${pGitHubBranch}-test"
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: CodeBuild
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: "1"
                Provider: CodeBuild
              InputArtifacts:
                - Name: !Sub "${pGitHubRepoName}-${pGitHubBranch}-source-artifacts"
              OutputArtifacts:
                - Name: !Sub "${pGitHubRepoName}-${pGitHubBranch}-build-output"
              Configuration:
                ProjectName: !Sub "${pGitHubRepoName}-${pGitHubBranch}"
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: DeployAction
              InputArtifacts:
              - Name: !Sub "${pGitHubRepoName}-${pGitHubBranch}-build-output"
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: "1"
                Provider: CodeDeploy
              Configuration:
                ApplicationName: !Sub "${pGitHubRepoName}-${pGitHubBranch}"
                DeploymentGroupName: !Sub "${pGitHubRepoName}-${pGitHubBranch}"
              RunOrder: 1
  
  # code build
  rCodeBuildRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - "codebuild.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: CodeBuildPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource:
                  - "arn:aws:logs:*:*:log-group:/aws/codebuild/*"
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                  - "s3:PutObject"
                Resource: "arn:aws:s3:::codepipeline-*/*"
              - Sid: S3ListBuildArtifactBucket
                Effect: Allow
                Action:
                  - s3:ListBucket
                Resource:
                  - !Sub 'arn:aws:s3:::${pGitHubRepoName}-${pGitHubBranch}-pipeline'
              - Sid: S3ListGetPutObjectsBuildArtifactBucket
                Effect: Allow
                Action:
                  - s3:ListObjects
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
                  - s3:PutObject
                  - s3:PutObjectAcl
                Resource:
                  - !Sub 'arn:aws:s3:::${pGitHubRepoName}-${pGitHubBranch}-pipeline/*'                  
  
  rTestCodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "${pGitHubRepoName}-${pGitHubBranch}-test"
      Description: CodeBuild project for running Node tests
      ServiceRole: !GetAtt rCodeBuildRole.Arn
      Artifacts:
        Name: !Sub "${pGitHubRepoName}-${pGitHubBranch}-test"
        Type: CODEPIPELINE
        Packaging: NONE
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.1
          phases:
            install:
              commands:
                - npm install
                - npm install -g mocha
            build:
              commands:
                - npm test
      TimeoutInMinutes: 10
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_LARGE
        Image: aws/codebuild/eb-nodejs-6.10.0-amazonlinux-64:4.0.0-1.0.0
  
  rCodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "${pGitHubRepoName}-${pGitHubBranch}"
      ServiceRole: !GetAtt rCodeBuildRole.Arn
      Artifacts:
        Name: !Sub "${pGitHubRepoName}-${pGitHubBranch}"
        Type: CODEPIPELINE
        Packaging: NONE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/nodejs:7.0.0
      Source:
        Type: CODEPIPELINE
      TimeoutInMinutes: 10
  
  # code deploy
  rDeployApplication:
    Type: "AWS::CodeDeploy::Application"
    Properties:
      ApplicationName: !Sub "${pGitHubRepoName}-application"

  rDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref rDeployApplication
      DeploymentConfigName: CodeDeployDefault.AllAtOnce
      DeploymentGroupName: !Sub "${pGitHubRepoName}-application"
      ServiceRoleArn: !GetAtt rCodeDeployRole.Arn

  rCodeDeployRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Sid: "1"
            Effect: Allow
            Principal:
              Service:
                - !Sub "codedeploy.${pTargetRegion}.amazonaws.com"
            Action: sts:AssumeRole
      Path: "/"
  
  rCodeDeployRolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CodeDeployPolicy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Resource: "*"
            Action:
              - ec2:Describe*
      Roles:
        - !Ref rCodeDeployRole

  # rCodeBuildRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: '2012-10-17'
  #       Statement:
  #         - Effect: Allow
  #           Action:
  #             - sts:AssumeRole
  #           Principal:
  #             Service:
  #               - codebuild.amazonaws.com
  #     Policies:
  #       - PolicyName: CodeBuildServiceRolePolicy
  #         PolicyDocument:
  #           Version: '2012-10-17'
  #           Statement:
  #             - Sid: CloudWatchWriteLogs
  #               Effect: Allow
  #               Action:
  #                 - logs:CreateLogGroup
  #                 - logs:CreateLogStream
  #                 - logs:PutLogEvents
  #                 - logs:PutSubscriptionFilter
  #               Resource: '*'
  #             - Sid: S3ListBucket
  #               Effect: Allow
  #               Action:
  #                 - s3:ListBucket
  #               Resource:
  #                 - '*'
  #             - Sid: S3ListGetPutObjects
  #               Effect: Allow
  #               Action:
  #                 - s3:ListObjects
  #                 - s3:GetObject
  #                 - s3:GetObjectVersion
  #                 - s3:GetBucketVersioning
  #                 - s3:PutObject
  #                 - s3:PutObjectAcl
  #               Resource:
  #                 - '*'

  rGitHubAuthTokenSecret:
    Type: AWS::CodeBuild::SourceCredential
    Properties:
      AuthType: PERSONAL_ACCESS_TOKEN
      ServerType: GITHUB
      Token: !Sub '{{resolve:secretsmanager:${pGitHubOAuthTokenSecretArn}:SecretString:GITHUB_ACCESS_TOKEN}}'
    
  # rCfnDeploymentProject:
  #   Type: AWS::CodeBuild::Project
  #   Properties:
  #     Name: wilpro-cfn-project
  #     ServiceRole: !GetAtt rCodeBuildRole.Arn
  #     Source:
  #       Type: GITHUB
  #       Location: !Ref pGitHubUrl
  #       BuildSpec: buildspec-cfn.yml
  #       Auth:
  #         Type: OAUTH
  #         Resource: !Ref rGitHubAuthTokenSecret
  #     Artifacts:
  #       Type: NO_ARTIFACTS
  #     Environment:
  #       ComputeType: BUILD_GENERAL1_SMALL
  #       Image: !Ref pCfnBuildImage
  #       Type: LINUX_CONTAINER
  #     Triggers: 
  #       Webhook: true
  #       FilterGroups:
  #         - - Type: EVENT
  #             Pattern: PULL_REQUEST_CREATED,PULL_REQUEST_UPDATED
  #           - Type: BASE_REF
  #             Pattern: !Sub ^refs/heads/master$
  #             ExcludeMatchedPattern: false
  #     TimeoutInMinutes: 5

Outputs:
    rALBDNS:
        Description: "Application Load Balancer Hostname"
        Value:
          !GetAtt rApplicationLoadBalancer.DNSName
    AppServerOne:
        Description: "App Server One"
        Value:
          Ref: rAppServerOne
    AppServerTwo:
        Description: "App Server Two"
        Value:
          Ref: rAppServerTwo
    ApplicationLoadBalancer:
        Description: "Application Load Balancer"
        Value:
          Ref: rApplicationLoadBalancer